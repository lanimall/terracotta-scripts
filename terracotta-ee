#!/bin/bash
# chkconfig: 345 80 05
# description: Starts up / Stop the Terracotta nodes on this server as defined by the Terracotta config file.
## processname: terracotta
##
## user: $RUN_AS_USER
##

#configurable variables
RUN_AS_USER="tc_user"
TERRACOTTA_HOME="/opt/terracotta/terracotta-ee/server"
TERRACOTTA_DATA_HOME="/opt/terracotta/data"
TERRACOTTA_DATA_PRECLEAN_BACKUP_HOME="/opt/terracotta/preclean-data-backup"
TERRACOTTA_LOGS_HOME="/opt/terracotta/logs"
TC_CONFIG_XML="$TERRACOTTA_HOME/bin/tc-config.xml"
TC_JMX_PORT="9570"

# Source function library.
if [ -f /etc/init.d/functions ]; then
    . /etc/init.d/functions
elif [ -f /etc/rc.d/init.d/functions ] ; then
    . /etc/rc.d/init.d/functions
else
  exit 0
fi

# For SELinux we need to use 'runuser' not 'su'
if [ -x "/sbin/runuser" ]; then
    SU="/sbin/runuser"
else
    SU="/bin/su"
fi

#specify nohup command path
NOHUP="/usr/bin/nohup"

RETVAL=$?
CURRENT_USER=`id -nu`
CURRENT_HOSTNAME=`hostname`
DOCLEAN=""
dt=`date +%Y%m%d_%H%M%S`

SERVER_NAMES=$(cat $TC_CONFIG_XML | grep host=\"$CURRENT_HOSTNAME\" | awk '{print $3}' | cut -f2 -d"=" | sed 's/\"//g' | cut -f1 -d">" | sort -u)

function getPID() {
    PIDGREP="com.tc.server.TCServerMain"
    TC_NODE_NAME=$1
    PID_CMD=`ps -elf | grep ${PIDGREP} | grep -v grep | grep ${TC_NODE_NAME} | awk '{print $4}'`
    echo $PID_CMD
}

function getNodeStatus(){
    FULLSTATUS=""
    TC_NODE_NAME=$1
    TCPID=`getPID $TC_NODE_NAME`
    if [ "x$TCPID" == "x" ]; then
        echo "not running"
        return
    fi

    echo -n "PID:$TCPID"

    SERVERSTAT_PATH="${TERRACOTTA_HOME}/bin/server-stat.sh"
    if [ -f $SERVERSTAT_PATH ]; then
        INTERNAL_IP=`ip addr show eth0 | grep "inet " | awk '{print $2}' | cut -f1 -d"/"`
        FULLSTATUS=`${SERVERSTAT_PATH} -s "$INTERNAL_IP:$TC_JMX_PORT" 2> /dev/null | grep $INTERNAL_IP`
        echo " $FULLSTATUS" | sed "s/group name/stripe/g" | sed "s/: /:/g" | sed "s/$INTERNAL_IP\.//g"
    fi
}

function start() {
    RETVAL=0
    if [ -f $TERRACOTTA_HOME/bin/start-tc-server.sh ]; then
        cd $TERRACOTTA_HOME/bin
        for SERVER_NAME in ${SERVER_NAMES}
        do
            SUBRETVAL=1
            echo "Starting Terracotta server $SERVER_NAME..."
            TCPID=`getPID $SERVER_NAME`
            if [ "x$TCPID" != "x" ]; then
                echo "Terracotta server $SERVER_NAME is already running. PID=$TCPID"
            else
                if [ "x$CURRENT_USER" != "x$RUN_AS_USER" ]; then
                    cleanupexec=0
                    if [ "$DOCLEAN" == "true" ]; then
                        cleanupexec=1
                        echo
                        echo "Performing data clean-up first"
                        if [ -d $TERRACOTTA_DATA_HOME ] && [ -d $TERRACOTTA_DATA_PRECLEAN_BACKUP_HOME ]; then
                            echo "Backing up $TERRACOTTA_DATA_HOME to $TERRACOTTA_DATA_PRECLEAN_BACKUP_HOME/databackup-$dt.tar.gz"
                            $SU $RUN_AS_USER -c "tar czf $TERRACOTTA_DATA_PRECLEAN_BACKUP_HOME/databackup-$dt.tar.gz $TERRACOTTA_DATA_HOME"
                            backupexec=$?
                            echo -n "Data Backup:"
                            if [ $backupexec -eq 0 ]; then
                                echo "[OK]"
                                $SU $RUN_AS_USER -c "rm -Rf $TERRACOTTA_DATA_HOME/*"
                                cleanupexec=$?
                                echo -n "Data Clean-up:"
                                if [ $cleanupexec -eq 0 ]; then
                                    echo_success
                                else
                                    echo_failure
                                fi
                            else
                                echo_failure
                            fi
                        else
                            echo "$TERRACOTTA_DATA_HOME and/or $TERRACOTTA_DATA_PRECLEAN_BACKUP_HOME do not exist...Clean-up can't be done"
                        fi
                    fi

                    if [ $cleanupexec -eq 0 ]; then
                        $SU $RUN_AS_USER -c "$NOHUP $TERRACOTTA_HOME/bin/start-tc-server.sh -f $TC_CONFIG_XML -n $SERVER_NAME >> $TERRACOTTA_LOGS_HOME/nohup-terracotta.out 2>&1" &
                        SUBRETVAL=$?
                    else
                        SUBRETVAL=1
                    fi
                else
                    cleanupexec=0
                    if [ "$DOCLEAN" == "true" ]; then
                        cleanupexec=1
                        echo
                        echo "Performing data clean-up first"
                        if [ -d $TERRACOTTA_DATA_HOME ] && [ -d $TERRACOTTA_DATA_PRECLEAN_BACKUP_HOME ]; then
                            echo "Backing up $TERRACOTTA_DATA_HOME to $TERRACOTTA_DATA_PRECLEAN_BACKUP_HOME/databackup-$dt.tar.gz"
                            tar czf $TERRACOTTA_DATA_PRECLEAN_BACKUP_HOME/databackup-$dt.tar.gz $TERRACOTTA_DATA_HOME
                            backupexec=$?
                            echo -n "Data Backup:"
                            if [ $backupexec -eq 0 ]; then
                                echo "[OK]"
                                rm -Rf $TERRACOTTA_DATA_HOME/*
                                cleanupexec=$?
                                echo -n "Data Clean-up:"
                                if [ $cleanupexec -eq 0 ]; then
                                    echo_success
                                else
                                    echo_failure
                                fi
                            else
                                echo_failure
                            fi
                        else
                            echo "$TERRACOTTA_DATA_HOME and/or $TERRACOTTA_DATA_PRECLEAN_BACKUP_HOME do not exist...Clean-up can't be done"
                        fi
                    fi

                    if [ $cleanupexec -eq 0 ]; then
                        $NOHUP $TERRACOTTA_HOME/bin/start-tc-server.sh -f $TC_CONFIG_XML -n $SERVER_NAME >> $TERRACOTTA_LOGS_HOME/nohup-terracotta.out 2>&1 &
                        SUBRETVAL=$?
                    else
                        SUBRETVAL=1
                    fi
                fi
            fi
            echo -n "Terracotta server $SERVER_NAME startup:"
            if [ $SUBRETVAL -eq 0 ]; then
                echo_success
            else
                echo_failure
            fi

            let "RETVAL = $RETVAL + $SUBRETVAL"
        done
    fi
    echo
    return $RETVAL
}

function stop() {
    RETVAL=0
    if [ -f $TERRACOTTA_HOME/bin/stop-tc-server.sh ]; then
        cd $TERRACOTTA_HOME/bin
        for SERVER_NAME in ${SERVER_NAMES}
        do
            SUBRETVAL=1
            echo -n "Stopping Terracotta server $SERVER_NAME:"
            if [ "x$CURRENT_USER" != "x$RUN_AS_USER" ]; then
                $SU $RUN_AS_USER -c "$NOHUP $TERRACOTTA_HOME/bin/stop-tc-server.sh -f $TC_CONFIG_XML -n $SERVER_NAME >> $TERRACOTTA_LOGS_HOME/nohup-terracotta.out 2>&1" &
            else
                $NOHUP $TERRACOTTA_HOME/bin/stop-tc-server.sh -f $TC_CONFIG_XML -n $SERVER_NAME >> $TERRACOTTA_LOGS_HOME/nohup-terracotta.out 2>&1 &
            fi

            SUBRETVAL=$?
            if [ $SUBRETVAL -eq 0 ]; then
                echo_success
            else
                echo_failure
            fi

            let "RETVAL = $RETVAL + $SUBRETVAL"
        done
    fi
    echo
    return $RETVAL
}

function info() {
    RETVAL=0
    for SERVER_NAME in ${SERVER_NAMES}
    do
        SUBRETVAL=1
        echo -n "Status for $SERVER_NAME --> "
        STATUS=`getNodeStatus $SERVER_NAME`
        if [ "x$STATUS" != "x" ]; then
            SUBRETVAL=0
        fi
        echo $STATUS
        let "RETVAL = $RETVAL + $SUBRETVAL"
    done
    echo
    return $RETVAL
}

case "$1" in
 start)
    start
     ;;
 start-clean)
    DOCLEAN="true"
    start
     ;;
 stop)
    stop
     ;;
 info)
    info
     ;;
 restart-clean)
    DOCLEAN="true"
    stop
    echo "Waiting 5 seconds before restart..."
    sleep 5
    start
    ;;
 restart)
    stop
    echo "Waiting 5 seconds before restart..."
    sleep 5
    start
    ;;
 *)
    echo "Usage: $0 {start|start-clean|stop|restart|restart-clean|info}"
    RETVAL="2"
    ;;
esac

exit $RETVAL
